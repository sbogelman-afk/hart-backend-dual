from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
import os
import openai

# Initialize FastAPI
app = FastAPI(title="HART Evaluation API")

# âœ… CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ðŸ”’ In production, restrict to your Netlify domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Security
security = HTTPBearer()

# Environment variables
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# Request schema
class IntakeRequest(BaseModel):
    reportId: str = Field(..., description="Unique report ID")
    language: str = Field("en", description="Preferred language")
    answers: dict = Field(..., description="Raw answers from intake form")

# Response schema
class IntakeResponse(BaseModel):
    evaluation: dict = Field(..., description="Structured AI evaluation")

@app.get("/")
def root():
    return {"message": "Welcome to the HART Evaluation API. Visit /docs to test."}

@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/evaluate", response_model=IntakeResponse)
def evaluate(
    request: IntakeRequest,
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    # âœ… Token check
    if credentials.credentials != API_TOKEN:
        raise HTTPException(status_code=401, detail="Unauthorized")

    # Build prompt
    prompt = f"""
    Patient intake report ID: {request.reportId}
    Language: {request.language}
    Data: {request.answers}

    Provide a structured medical intake evaluation with the following sections:
    - Chief complaint
    - History summary
    - Risk flags
    - Recommended follow-ups
    - Differential considerations
    - Patient-friendly summary
    - Emergency guidance
    """

    try:
        # âœ… OpenAI call
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
        )

        ai_text = response.choices[0].message.content

        # âœ… Structured response
        return {
            "evaluation": {
                "chief_complaint": request.answers.get("reason", "N/A"),
                "history_summary": ai_text,
                "risk_flags": request.answers.get("risk_flags", {}),
                "recommended_followups": [
                    "Follow-up tests and consults as per evaluation."
                ],
                "differential_considerations": [
                    "Generated by AI evaluation"
                ],
                "patient_friendly_summary": "Summary provided in plain language.",
                "emergency_guidance": "If severe symptoms occur (chest pain, shortness of breath, fainting), call emergency services immediately."
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
